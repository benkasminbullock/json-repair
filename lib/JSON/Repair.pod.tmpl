[% start_year=2016 %]
[% MACRO example(file) BLOCK %]
[%- pl = file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/JSON-Repair-[% version %]/examples/[% pl %]> in the distribution.)
[% END %]
=encoding UTF-8

=head1 NAME

[% info.colon %] - reformat JSON to strict compliance

=head1 SYNOPSIS

[% example("synopsis") %]

=head1 VERSION

This documents version [% version %] of [% info.colon %] corresponding to
git commit L<[% commit.commit %]|[% repo %]/commit/[% commit.commit
%]> released on [% commit.date %].

=head1 DESCRIPTION

Given some "relaxed" JSON text containing such things as trailing
commas, comments, or strings containing tab characters or newlines,
this module uses heuristics to convert these into strictly compliant
JSON. 

[% info.colon %] is an example of the use of the machine-readable
error messages in L<JSON::Parse>.

=head1 FUNCTIONS

=head2 repair_json

    my $repaired = repair_json ($json, %options);

This alters its input in various ways to make it compliant with the
JSON specification, or prints an error message if C<$json> cannot be
repaired, and returns the undefined value.

=head3 Repairs applied

=over

=item Strip trailing commas

[% example("trailing-commas") %]

=item Change single quotes to double quotes in keys

[% example("single-quotes") %]

=item Add missing object-end, string-end and array-end markers

[% example("missing-ends") %]

=item Add quotes to unquoted keys

[% example("unquoted-keys") %]

=item Add missing commas to objects and arrays

The module can add missing commas between the end of object or array
values.

[% example('missing-commas') %]

=item Remove comments

The module removes C and C++ comments and hash comments (Perl-style
comments) from JSON.

This example uses the example from the synopsis of L<JSON::Relaxed>:

[% example('comments') %]

This example demonstrates removing hash comments:

[% example('hash-comments') %]

The facility to remove hash comments was added in version 0.02 of the
module. It currently uses L</C::Tokenize> for the C/C++ comment
regexes.

=item Sort out broken numbers

JSON does not allow various kinds of numbers, such as decimals less
than one without a leading zero, such as C<.123> (should be C<0.123>),
decimals with an exponent but without a fraction, such as C<1.e9>
(should be C<1.0e9>), or integers with a leading zero, such as C<0123>
(should be C<123>). [% info.colon %] adds or removes digits to make
them parseable.

[% example('numbers') %]

[% info.colon %] strips leading zeros as in C<0123> without converting
the result to octal (base 8). It doesn't attempt to repair hexadecimal
(base 16) numbers.

The facility to reinterpret numbers was added in version 0.02 of the
module.

=item Convert unprintable and whitespace characters to escapes in strings

Strings containing unprintable ASCII characters and some kinds of
whitespace are not allowed in JSON. This converts them into valid
escapes.

[% example('strings') %]

This was added in version 0.04 of the module.

=item Empty inputs are converted into the empty string

Completely empty inputs are converted into C<"">.

=back

=head3 Options

Valid options are

=over

=item verbose

    my $okjson = repair_json ($json, verbose => 1);

Give a true value to make the module print messages about the
operations applied. This facility is largely for debugging the module
itself. The messages may be poorly formatted and opaque, and are not
guaranteed to be the same in future versions of the module.

Here is the output of the synopsis run with the C<verbose> option:

[% example("synopsis-verbose") %]

=back

=head1 EXPORTS

L</repair_json> is exported on demand. The tag ":all" exports all functions.

    use [% info.colon %] ':all';

=head1 DEPENDENCIES

=over

=item JSON::Parse

This module relies on L<JSON::Parse/diagnostics_hash> to find the
errors in the input. Most of the work of [% info.colon %] is actually done
by JSON::Parse's diagnostics, and then [% info.colon %] applies a few
heuristic rules to guess what might have caused the error, modify the
input, and re-parse it repeatedly until either the input is compliant,
or none of the rules can be applied to it.

=item C::Tokenize

This module uses the regular expression for C comments from L<C::Tokenize>.

=item Carp

L<Carp> is used to report errors.

=item Perl 5.14

Unfortunately L<JSON::Parse/diagnostics_hash> is only available for
Perl 5.14 or later, because it relies on L<croak_sv in
perlapi|https://perldoc.perl.org/perlapi#croak_sv>, which was
introduced in Perl 5.14. I'm not sure if there is a way to get the
same behaviour with earlier versions of Perl.

=back

=head1 SCRIPT

A script F<repairjson> is installed with the module which runs
L</repair_json> on the files given as arguments:

    repairjson file1.json file2.json

The output is the repaired JSON.

The script was added in version 0.02 of the module.

=head1 SEE ALSO

See the section L<JSON::Parse/SEE ALSO> for a comprehensive list of
JSON modules on CPAN and more information about JSON itself.

=head2 JSON-like formats

It's very likely that a non-compliant JSON format cannot be handled by
this module, because the changes that need to be made to put one
variety of JSON-like format into strict JSON are incompatible with the
changes that need to be made to fix another. For example, it is
impossible to correctly convert the L</HJSON> format or the L</YAML>
format into compliant JSON without breaking other parts of the
module. Thus, no comprehensive solution is possible.

Since it is unfeasible to meaningfully convert every possible list of
bytes into compliant JSON, [% info.colon %] should be regarded as an
example which demonstrates the use of the diagnostics provided by the
L</JSON::Parse> module to repair broken JSON inputs, rather than a
general solution.

=over

=item HJSON

See L<http://hjson.org>. This format cannot be converted to strictly
compliant JSON by this module.

=item YAML

See L<http://yaml.org>. This format cannot be converted to strictly
compliant JSON by this module.

=back

=cut
[% INCLUDE "author" %]
